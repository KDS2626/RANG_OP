/*
* Calculator program Ver 0.1
* 작성자 : 신예랑
* 내  용: 계산기 프로그램 ver 0.1(C++스타일 코딩)
* 운영체제 : 윈도우
* 서버
*/

#include <iostream>
#include <stdlib.h>
#include <winsock2.h>
#define BUF_SIZE 100
using namespace std;

void Error_handling(const char* msg)
{
    fputs(msg, stderr);
    fputc('\n', stderr);
    exit(1);
}

class opinfo
{
public:

    int opnd_cnt;       // 계산할 숫자의 갯수
    int num1[BUF_SIZE];  // 입력받은 숫자들
    double num2[BUF_SIZE]; // '' (실수)
    int result1;         // 결과 값
    double result2;      // 결과 값
    char op;      // 연산자

    opinfo(int _opnd_cnt = 0, int _num1[] = 0, double _num2[] = 0, int result1 = 0, int result2 = 0, char _op = 0)
        : opnd_cnt(_opnd_cnt), result1(result1), result2(result2), op(_op)
    {
        if (_op == '/')
        {
            for (int i = 0; i < _opnd_cnt; i++)
                num2[i] = _num2[i];
        }
        else
        {
            for (int i = 0; i < _opnd_cnt; i++)
                num1[i] = _num1[i];
        }
    }

    char GetOp() const
    {
        return op;
    }

    void Cal()
    {
        int i;
        result1 = num1[0];

        for (i = 1; i < opnd_cnt; i++)
        {
            switch (op)
            {
            case '+':
                result1 += num1[i];
                break;
            case '-':
                result1 -= num1[i];
                break;
            case '*':
                result1 *= num1[i];
                break;
            }
        }
    }

    void div_Cal()
    {
        int i;
        result2 = num2[0];

        for (i = 1; i < opnd_cnt; i++)
            result2 /= num2[i];
    }
};

int main(int argc, char* argv[])
{
    WSADATA wsaData;
    SOCKET hServSock, hClntSock;
    SOCKADDR_IN servAddr, clntAddr;
    int szClntAddr;

    if (argc != 2)
    {
        cout << "Usage : " << argv[0] << "<port>" << endl;
        exit(1);
    }

    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0)
        Error_handling("WSAStartup() error");

    hServSock = socket(PF_INET, SOCK_STREAM, 0);
    if (hServSock == INVALID_SOCKET)
        Error_handling("socket() error!");

    memset(&servAddr, 0, sizeof(servAddr));
    servAddr.sin_family = AF_INET;
    servAddr.sin_addr.s_addr = htonl(INADDR_ANY);
    servAddr.sin_port = htons(atoi(argv[1]));

    if (bind(hServSock, (struct sockaddr*)&servAddr, sizeof(servAddr)) == SOCKET_ERROR)
        Error_handling("bind() error");

    if (listen(hServSock, 5) == SOCKET_ERROR)
        Error_handling("listen() error");

    szClntAddr = sizeof(clntAddr);

    hClntSock = accept(hServSock, (struct sockaddr*)&clntAddr, &szClntAddr);
    if (hClntSock == INVALID_SOCKET)
        Error_handling("accept() error");

    opinfo op;

    if (recv(hClntSock, (char*)&op, sizeof(op), 0) == SOCKET_ERROR)
        Error_handling("recv() error");
    
    
    if (op.GetOp() == '/')
    {
        op.div_Cal();
        if (send(hClntSock, (char*)&op, sizeof(op), 0) == SOCKET_ERROR)
            Error_handling("send() error");
    }

    else
    {
        op.Cal();
        if (send(hClntSock, (char*)&op, sizeof(op), 0) == SOCKET_ERROR)
            Error_handling("send() error");
    }
    
    closesocket(hClntSock);
    closesocket(hServSock);
    WSACleanup();

    return 0;
}
